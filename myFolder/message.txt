CREATE TABLE Teams (
  t_id SERIAL PRIMARY KEY,
  t_name VARCHAR(50),
  stadium VARCHAR(50),
  description TEXT,
  hwins INT,
  awins INT,
  hlosses INT,
  alosses INT,
  hdraws INT,
  adraws INT
);

CREATE TABLE Players (
  p_id SERIAL PRIMARY KEY,
  p_name VARCHAR(10),
  p_surname VARCHAR(10),
  t_id INT REFERENCES Teams(t_id),
  pos VARCHAR(20),
  yellow_cards INT,
  red_cards INT,
  goals INT,
  active_time INT 
);
--missing constraint

CREATE TABLE Coaches (
  c_id SERIAL PRIMARY KEY,
  c_name VARCHAR(10),
  c_surname VARCHAR(10),
  t_id INT REFERENCES Teams(t_id),
  pos VARCHAR(20),
  yellow_cards INT,
  red_cards INT,
  goals INT,
  active_time INT,
  description VARCHAR(20) 
);

CREATE TABLE Matches (
  m_id SERIAL PRIMARY KEY,
  hometeamid INT REFERENCES Teams (t_id),
  awayteamid INT REFERENCES Teams (t_id),
  hscore INT,
  ascore INT,
  mdate DATE,
  CONSTRAINT different_teams CHECK (hometeamid != awayteamid)
);
--missing constraint

CREATE TABLE PlayerTimeStats (
  p_id INT REFERENCES Players (p_id),
  m_id INT REFERENCES Matches (m_id),
  goals INT,
  badgoals INT,
  yellow_cards INT,
  red_cards INT,
  penalties INT,
  corners INT,
  etimestamp TIMESTAMP 
);

=======================================================================================================================

Οι περιορισμοί ακεραιότητας είναι: 

Πίνακας Players: 

PRIMARY KEY (p_id): Ορίζει το πεδίο p_id ως πρωτεύον κλειδί, δηλαδή μοναδικό αναγνωριστικό για κάθε εγγραφή στον πίνακα. 
FOREIGN KEY (t_id) REFERENCES Teams(t_id): Ορίζει το πεδίο t_id ως ξένο κλειδί που αναφέρεται στον πίνακα Teams και συνδέει την καταχώριση του παίκτη με την ομάδα στην οποία ανήκει. 

Πίνακας Coaches: 

PRIMARY KEY (c_id): Ορίζει το πεδίο c_id ως πρωτεύον κλειδί, μοναδικό για κάθε εγγραφή στον πίνακα. 
FOREIGN KEY (t_id) REFERENCES Teams(t_id): Ορίζει το πεδίο t_id ως ξένο κλειδί που αναφέρεται στον πίνακα Teams και συνδέει την καταχώριση του προπονητή με την ομάδα στην οποία ανήκει. 

Πίνακας Teams: 

PRIMARY KEY (t_id): Ορίζει το πεδίο t_id ως πρωτεύον κλειδί, μοναδικό για κάθε εγγραφή στον πίνακα. 

Πίνακας Matches: 

PRIMARY KEY (m_id): Ορίζει το πεδίο m_id ως πρωτεύον κλειδί, μοναδικό για κάθε εγγραφή στον πίνακα. 
FOREIGN KEY (hometeamid) REFERENCES Teams (t_id): Ορίζει το πεδίο hometeamid ως ξένο κλειδί που αναφέρεται στον πίνακα Teams και αντιπροσωπεύει την ομάδα που παίζει στον εντός έδρας αγώνα. 
FOREIGN KEY (awayteamid) REFERENCES Teams (t_id): Ορίζει το πεδίο awayteamid ως ξένο κλειδί που αναφέρεται στον πίνακα Teams και αντιπροσωπεύει την ομάδα που παίζει στον εκτός έδρας αγώνα. 
CONSTRAINT different_teams CHECK (hometeamid != awayteamid): Επιβάλλει τον περιορισμό ότι η ομάδα του σπιτιού και η ομάδα των εκτός έδρας αγώνων πρέπει να είναι διαφορετικές. 

Πίνακας PlayerTimeStats: 

FOREIGN KEY (p_id) REFERENCES Players (p_id): Ορίζει το πεδίο p_id ως ξένο κλειδί που αναφέρεται στον πίνακα Players και συνδέει την καταχώριση με τον αντίστοιχο παίκτη. 
FOREIGN KEY (m_id) REFERENCES Matches (m_id): Ορίζει το πεδίο m_id ως ξένο κλειδί που αναφέρεται στον πίνακα Matches και συνδέει την καταχώριση με τον αντίστοιχο αγώνα. 

=======================================================================================================================

CREATE OR REPLACE FUNCTION update_teams_history()
RETURNS TRIGGER AS $$
BEGIN
  IF OLD.t_id IS NOT NULL THEN
    INSERT INTO Ομάδες_Υποβιβασμός_Κατηγορίας (t_id, t_name, stadium)
    VALUES (OLD.t_id, OLD.t_name, OLD.stadium);
  END IF;
  RETURN OLD;
END;
--$$ LANGUAGE plpgsql;

CREATE TRIGGER teams_delete_trigger
AFTER DELETE ON Teams
FOR EACH ROW
EXECUTE FUNCTION update_teams_history();

=======================================================================================================================

CREATE OR REPLACE FUNCTION get_player_stats()
RETURNS VOID AS $$
DECLARE
  p_id INT;
  p_name VARCHAR(10);
  t_id INT;
  m_id INT;
  goals INT;
  penalties INT;
  yellow_cards INT;
  red_cards INT;
  Active_time INT;
  pos VARCHAR(20);
  counter INT := 0;
BEGIN
  -- Άνοιγμα cursor για να ανακτηθούν οι πληροφορίες των παικτών
  FOR player_row IN (SELECT p_id, p_name, t_id FROM Players)
  LOOP
    p_id := player_row.p_id;
    p_name := player_row.p_name;
    t_id := player_row.t_id;
    
    -- Άνοιγμα cursor για να ανακτηθούν οι πληροφορίες των αγώνων του παίκτη
    FOR match_row IN (SELECT m_id, goals, penalties, yellow_cards, red_cards, Active_time, pos
                      FROM PlayerTimeStats
                      WHERE p_id = p_id
                      ORDER BY etimestamp)
    LOOP
      m_id := match_row.m_id;
      goals := match_row.goals;
      penalties := match_row.penalties;
      yellow_cards := match_row.yellow_cards;
      red_cards := match_row.red_cards;
      active_time := match_row.active_time;
      position := match_row.position;
      
      -- Εμφάνιση των πληροφοριών του παίκτη ανά ομάδα και αγώνα
      RAISE NOTICE 'Player ID: %, Player Name: %, Team ID: %, Match ID: %, Goals: %, Penalties: %, Yellow Cards: %, Red Cards: %, Minutes Played: %, Position: %',
                   p_id, p_name, t_id, m_id, goals, penalties, yellow_cards, red_cards, minutes_played, pos;
      
      counter := counter + 1;
      
      -- Έλεγχος για την ομάδα των 10 γραμμών και επανεκκίνηση του μετρητή
      IF counter = 10 THEN
        RAISE NOTICE '--------------------------------';
        counter := 0;
      END IF;
    END LOOP;
  END LOOP;
END;
$$ LANGUAGE plpgsql;

-- Εκτέλεση της αποθηκευμένης διαδικασίας για την ανάκτηση των στατιστικών των παικτών
SELECT get_player_stats();

=======================================================================================================================

--i smell something very wrong here

CREATE VIEW GameSchedule AS
SELECT M.m_date AS m_date, T1.t_name AS home_team, T2.t_name AS away_team, M.hscore, M.ascore,
       T1.stadium AS home_stadium, T2.stadium AS away_stadium, 
       PT1.p_name AS home_player_name, PT1.pos AS home_player_position, PT1.active_time AS home_player_minutes,
       PT1.yellow_cards AS home_player_yellow_cards, PT1.red_cards AS home_player_red_cards, PT1.goals AS home_player_goals,
       PT2.p_name AS away_player_name, PT2.pos AS away_player_position, PT2.active_time AS away_player_minutes,
       PT2.yellow_cards AS away_player_yellow_cards, PT2.red_cards AS away_player_red_cards, PT2.goals AS away_player_goals
FROM Matches M
INNER JOIN Teams T1 ON M.home_team_id = T1.t_id
INNER JOIN Teams T2 ON M.away_team_id = T2.t_id
LEFT JOIN PlayerTimeStats PT1 ON PT1.m_id = M.m_id AND PT1.p_id IN (
    SELECT p_id FROM Players WHERE t_id = T1.t_id
)
LEFT JOIN PlayerTimeStats PT2 ON PT2.m_id = M.m_id AND PT2.p_id IN (
    SELECT p_id FROM Players WHERE t_id = T2.t_id
)
WHERE M.mdate = '2023-05-30';

=======================================================================================================================

CREATE VIEW ChampionshipSchedule AS
SELECT M.mdate AS match_date, T1.t_name AS home_team, T2.t_name AS away_team, M.home_score, M.away_score,
       T1.stadium AS home_stadium, T2.stadium AS away_stadium,
       CASE WHEN M.home_score > M.away_score THEN T1.t_name
            WHEN M.home_score < M.away_score THEN T2.t_name
            ELSE 'Draw' END AS winning_team,
       CASE WHEN T1.t_id = M.home_team_id THEN 'Home' ELSE 'Away' END AS location
FROM Matches M
INNER JOIN Teams T1 ON M.home_team_id = T1.t_id
INNER JOIN Teams T2 ON M.away_team_id = T2.t_id
WHERE M.match_date BETWEEN '2022-09-01' AND '2023-06-30';

=======================================================================================================================